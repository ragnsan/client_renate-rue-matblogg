import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import ContentfulCache from './ContentfulCache';
import invariant from 'invariant';

var _require = require('contentful'),
    createClient = _require.createClient;

export default (function (clientOptions) {
  invariant(clientOptions.accessToken, 'ContentfulClient not created because `accessToken` was not provided.');
  invariant(clientOptions.space, 'ContentfulClient not created because `space` was not provided.');
  var client = createClient(_objectSpread({}, clientOptions));
  var cache = clientOptions.cache || new ContentfulCache();
  return _objectSpread(_objectSpread({
    cache: cache,
    ssrMode: clientOptions.ssrMode || false
  }, client), {}, {
    checkCache: function checkCache(requestKey) {
      return cache.has(requestKey) && cache.read(requestKey);
    },
    getEntry: function () {
      var _getEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id, options) {
        var requestKey, cacheEntry, request, response;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                requestKey = JSON.stringify({
                  id: id,
                  options: options
                });
                cacheEntry = cache.has(requestKey) && cache.read(requestKey);

                if (!cacheEntry) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", Promise.resolve(cacheEntry));

              case 5:
                request = client.getEntry(id, options);

                if (!clientOptions.ssrMode) {
                  cache.write(requestKey, request);
                }

                _context.next = 9;
                return request;

              case 9:
                response = _context.sent;
                cache.write(requestKey, response);
                return _context.abrupt("return", Promise.resolve(response));

              case 14:
                _context.prev = 14;
                _context.t0 = _context["catch"](0);
                return _context.abrupt("return", Promise.reject(_context.t0));

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 14]]);
      }));

      function getEntry(_x, _x2) {
        return _getEntry.apply(this, arguments);
      }

      return getEntry;
    }(),
    getEntries: function () {
      var _getEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {
        var requestKey, cacheEntry, request, response;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                requestKey = JSON.stringify(options);
                cacheEntry = cache.has(requestKey) && cache.read(requestKey);

                if (!cacheEntry) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve(cacheEntry));

              case 5:
                request = client.getEntries(options);

                if (!clientOptions.ssrMode) {
                  cache.write(requestKey, request);
                }

                _context2.next = 9;
                return request;

              case 9:
                response = _context2.sent;
                cache.write(requestKey, response);
                return _context2.abrupt("return", Promise.resolve(response));

              case 14:
                _context2.prev = 14;
                _context2.t0 = _context2["catch"](0);
                return _context2.abrupt("return", Promise.reject(_context2.t0));

              case 17:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 14]]);
      }));

      function getEntries(_x3) {
        return _getEntries.apply(this, arguments);
      }

      return getEntries;
    }()
  });
});