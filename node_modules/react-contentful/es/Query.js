import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import { Component } from 'react';
import PropTypes from 'prop-types';
import withContentful from './withContentful';
import { checkCache, fetchData, validateRequestRequirements } from './helpers';

var Query = /*#__PURE__*/function (_Component) {
  _inheritsLoose(Query, _Component);

  function Query(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    var data = checkCache(props);
    _this.state = {
      fetched: data ? true : false,
      loading: false,
      error: null,
      data: data
    };

    if (data) {
      props.onLoad(_this.state);
    }

    return _this;
  }

  var _proto = Query.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (!this.state.data) {
      this.requestContentfulData();
    }
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var _this2 = this;

    if (JSON.stringify(this.props) !== JSON.stringify(prevProps)) {
      this.setState({
        fetched: false
      }, function () {
        _this2.requestContentfulData();
      });
    }
  };

  _proto.requestContentfulData = function requestContentfulData() {
    var _this3 = this;

    var _this$props = this.props,
        parser = _this$props.parser,
        onRequest = _this$props.onRequest,
        onLoad = _this$props.onLoad,
        onError = _this$props.onError;
    validateRequestRequirements(this.props).then(function () {
      _this3.setState({
        error: null,
        loading: true
      }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                onRequest(_this3.state);
                fetchData(_this3.props).then(function (response) {
                  _this3.setState({
                    data: parser(response, _this3.props),
                    fetched: true,
                    loading: false
                  }, function () {
                    onLoad(_this3.state);
                  });
                });

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    })["catch"](function (error) {
      _this3.setState({
        error: error,
        fetched: true,
        loading: false
      }, function () {
        onError(_this3.state);
      });
    });
  };

  _proto.getQueryResult = function getQueryResult() {
    return this.state;
  };

  _proto.render = function render() {
    var _this4 = this;

    var _this$props2 = this.props,
        children = _this$props2.children,
        contentful = _this$props2.contentful;

    var finish = function finish() {
      return children(_this4.getQueryResult());
    };

    if (contentful && contentful.renderPromises) {
      return contentful.renderPromises.addQueryPromise(this, finish);
    }

    return finish();
  };

  return Query;
}(Component);

Query.propTypes = {
  children: PropTypes.func,
  contentType: PropTypes.string,
  id: PropTypes.string,
  include: PropTypes.number,
  query: PropTypes.object,
  parser: PropTypes.func,
  skip: PropTypes.bool,
  onError: PropTypes.func,
  onLoad: PropTypes.func,
  onRequest: PropTypes.func
};
Query.defaultProps = {
  children: function children(_ref2) {
    var data = _ref2.data,
        error = _ref2.error,
        fetched = _ref2.fetched,
        loading = _ref2.loading;
    return null;
  },
  include: 10,
  query: {},
  skip: false,
  parser: function parser(data, props) {
    return data;
  },
  onError: function onError() {},
  onLoad: function onLoad() {},
  onRequest: function onRequest() {}
};
export default withContentful(Query);