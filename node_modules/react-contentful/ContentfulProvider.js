"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _warning = _interopRequireDefault(require("warning"));

var _ContentfulContext = _interopRequireDefault(require("./ContentfulContext"));

var ContentfulProvider = /*#__PURE__*/function (_Component) {
  (0, _inheritsLoose2["default"])(ContentfulProvider, _Component);

  function ContentfulProvider(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    var client = props.client,
        locale = props.locale,
        renderPromises = props.renderPromises;
    _this.state = {
      client: client,
      locale: locale,
      renderPromises: renderPromises
    };
    return _this;
  }

  var _proto = ContentfulProvider.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        children = _this$props.children,
        context = _this$props.context;
    var Context = context || _ContentfulContext["default"];
    (0, _warning["default"])(this.state.client, 'No `client` specified on <ContentfulProvider />');
    return /*#__PURE__*/_react["default"].createElement(Context.Provider, {
      value: this.state
    }, children);
  };

  return ContentfulProvider;
}(_react.Component);

ContentfulProvider.propTypes = {
  children: _propTypes["default"].any,
  client: _propTypes["default"].object.isRequired,
  context: _propTypes["default"].object,
  locale: _propTypes["default"].string,
  renderPromises: _propTypes["default"].object
};
ContentfulProvider.defaultProps = {
  children: null,
  context: null,
  locale: 'en-US',
  renderPromises: null
};
var _default = ContentfulProvider;
exports["default"] = _default;