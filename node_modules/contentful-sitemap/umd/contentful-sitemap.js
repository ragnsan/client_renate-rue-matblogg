/*! contentful-sitemap v1.0.20 | (c) 2020 Ryan Hefner | MIT License | https://github.com/ryanhefner/contentful-sitemap !*/
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['contentful-sitemap'] = {}));
}(this, (function (exports) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var defineProperty = _defineProperty;

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var runtime_1 = createCommonjsModule(function (module) {
  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var runtime = (function (exports) {

    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined$1; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
      return obj[key];
    }
    try {
      // IE 8 has a broken Object.defineProperty that only works on DOM objects.
      define({}, "");
    } catch (err) {
      define = function(obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
      var generator = Object.create(protoGenerator.prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    exports.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function () {
      return this;
    };

    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype &&
        NativeIteratorPrototype !== Op &&
        hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
      // This environment has a native %IteratorPrototype%; use it instead
      // of the polyfill.
      IteratorPrototype = NativeIteratorPrototype;
    }

    var Gp = GeneratorFunctionPrototype.prototype =
      Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunction.displayName = define(
      GeneratorFunctionPrototype,
      toStringTagSymbol,
      "GeneratorFunction"
    );

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function(method) {
        define(prototype, method, function(arg) {
          return this._invoke(method, arg);
        });
      });
    }

    exports.isGeneratorFunction = function(genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor
        ? ctor === GeneratorFunction ||
          // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
    };

    exports.mark = function(genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        define(genFun, toStringTagSymbol, "GeneratorFunction");
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    exports.awrap = function(arg) {
      return { __await: arg };
    };

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value &&
              typeof value === "object" &&
              hasOwn.call(value, "__await")) {
            return PromiseImpl.resolve(value.__await).then(function(value) {
              invoke("next", value, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return PromiseImpl.resolve(value).then(function(unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration.
            result.value = unwrapped;
            resolve(result);
          }, function(error) {
            // If a rejected Promise was yielded, throw the rejection back
            // into the async generator function so it can be handled there.
            return invoke("throw", error, resolve, reject);
          });
        }
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function(resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
          // If enqueue has been called before, then we want to wait until
          // all previous Promises have been resolved before calling invoke,
          // so that results are always delivered in the correct order. If
          // enqueue has not been called before, then it is important to
          // call invoke immediately, without waiting on a callback to fire,
          // so that the async generator function has the opportunity to do
          // any necessary setup in a predictable way. This predictability
          // is why the Promise constructor synchronously invokes its
          // executor callback, and why async functions synchronously
          // execute code before the first await. Since we implement simple
          // async functions in terms of async generators, it is especially
          // important to get this right, even though it requires care.
          previousPromise ? previousPromise.then(
            callInvokeWithMethodAndArg,
            // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg
          ) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function () {
      return this;
    };
    exports.AsyncIterator = AsyncIterator;

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      if (PromiseImpl === void 0) PromiseImpl = Promise;

      var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList),
        PromiseImpl
      );

      return exports.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
          });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if (context.method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = context.arg;

          } else if (context.method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw context.arg;
            }

            context.dispatchException(context.arg);

          } else if (context.method === "return") {
            context.abrupt("return", context.arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done
              ? GenStateCompleted
              : GenStateSuspendedYield;

            if (record.arg === ContinueSentinel) {
              continue;
            }

            return {
              value: record.arg,
              done: context.done
            };

          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(context.arg) call above.
            context.method = "throw";
            context.arg = record.arg;
          }
        }
      };
    }

    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];
      if (method === undefined$1) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
          // Note: ["return"] must be used for ES3 parsing compatibility.
          if (delegate.iterator["return"]) {
            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            context.method = "return";
            context.arg = undefined$1;
            maybeInvokeDelegate(delegate, context);

            if (context.method === "throw") {
              // If maybeInvokeDelegate(context) changed context.method from
              // "return" to "throw", let that override the TypeError below.
              return ContinueSentinel;
            }
          }

          context.method = "throw";
          context.arg = new TypeError(
            "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);

      if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
      }

      var info = record.arg;

      if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
      }

      if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
          context.method = "next";
          context.arg = undefined$1;
        }

      } else {
        // Re-yield the result returned by the delegate method.
        return info;
      }

      // The delegate iterator is finished, so forget it and continue with
      // the outer generator.
      context.delegate = null;
      return ContinueSentinel;
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    define(Gp, toStringTagSymbol, "Generator");

    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
      return this;
    };

    Gp.toString = function() {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    exports.keys = function(object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined$1;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    exports.values = values;

    function doneResult() {
      return { value: undefined$1, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined$1;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined$1;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" &&
                hasOwn.call(this, name) &&
                !isNaN(+name.slice(1))) {
              this[name] = undefined$1;
            }
          }
        }
      },

      stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function(exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;

          if (caught) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            context.method = "next";
            context.arg = undefined$1;
          }

          return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }

            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }

            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev &&
              hasOwn.call(entry, "finallyLoc") &&
              this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry &&
            (type === "break" ||
             type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.method = "next";
          this.next = finallyEntry.finallyLoc;
          return ContinueSentinel;
        }

        return this.complete(record);
      },

      complete: function(record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = this.arg = record.arg;
          this.method = "return";
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }

        return ContinueSentinel;
      },

      finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        if (this.method === "next") {
          // Deliberately forget the last sent value so that we don't
          // accidentally pass it on to the delegate.
          this.arg = undefined$1;
        }

        return ContinueSentinel;
      }
    };

    // Regardless of whether this script is executing as a CommonJS module
    // or not, return the runtime object so that we can declare the variable
    // regeneratorRuntime in the outer scope, which allows this module to be
    // injected easily by `bin/regenerator --include-runtime script.js`.
    return exports;

  }(
    // If this script is executing as a CommonJS module, use module.exports
    // as the regeneratorRuntime namespace. Otherwise create a new empty
    // object. Either way, the resulting object will be used to initialize
    // the regeneratorRuntime variable at the top of this file.
     module.exports 
  ));

  try {
    regeneratorRuntime = runtime;
  } catch (accidentalStrictMode) {
    // This module should not be running in strict mode, so the above
    // assignment should always work unless something is misconfigured. Just
    // in case runtime.js accidentally runs in strict mode, we can escape
    // strict mode using a global Function call. This could conceivably fail
    // if a Content Security Policy forbids using Function, but in that case
    // the proper solution is to fix the accidental strict mode problem. If
    // you've misconfigured your bundler to force strict mode and applied a
    // CSP to forbid Function, and you're not willing to fix either of those
    // problems, please detail your unique predicament in a GitHub issue.
    Function("r", "regeneratorRuntime = r")(runtime);
  }
  });

  var regenerator = runtime_1;

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var asyncToGenerator = _asyncToGenerator;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var pathToRegexp = require('path-to-regexp');

  var invariant = require('invariant');

  var has = require('lodash.has');

  var get = require('lodash.get');

  var _require = require('sitemap'),
      SitemapStream = _require.SitemapStream,
      streamToPromise = _require.streamToPromise;
  /**
   * Validate client object matches expected shape of Contentful client.
   *
   * @param {Object} client
   * @return boolean
   */


  var validClient = function validClient(client) {
    if (!client.getEntries || typeof client.getEntries !== 'function') {
      return false;
    }

    if (!client.getEntry || typeof client.getEntry !== 'function') {
      return false;
    }

    if (!client.getLocales || typeof client.getLocales !== 'function') {
      return false;
    }

    return true;
  };
  /**
   * ContentfulSitemap Class
   * Accepts an array of routes, a Contentful client and a few options and can
   * spit out a beautiful sitemap that includes locale support.
   *
   * @param {ContentfulClient} client
   * @param {Array} routes
   * @param {Object} options
   * @return ContentfulSitemap
   */


  var ContentfulSitemap = /*#__PURE__*/function () {
    function ContentfulSitemap(client, routes, options) {
      var _this = this;

      if (routes === void 0) {
        routes = [];
      }

      if (options === void 0) {
        options = {};
      }

      invariant(client, 'Contentful client not provided to ContentfulSitemap');
      invariant(validClient(client), '`client` is not a valid instance of `ContentfulClientApi`');
      this.client = client;
      this.routes = routes.map(function (route) {
        return Object.assign({}, _this.route, route);
      });
      this.options = Object.assign({}, this.options, options);
    }
    /**
     * Add a route
     *
     * @pararm {Object} route
     * @return ContentfulSitemap
     */


    var _proto = ContentfulSitemap.prototype;

    _proto.addRoute = function addRoute(route) {
      this.routes = [].concat(this.routes, [Object.assign({}, this.route, route)]);
      return this;
    }
    /**
     * Load locales from Contentful
     *
     * @return Promise
     */
    ;

    _proto.loadLocales =
    /*#__PURE__*/
    function () {
      var _loadLocales = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        var locales;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return this.client.getLocales();

              case 3:
                locales = _context.sent;
                return _context.abrupt("return", Promise.resolve(locales));

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                console.error(_context.t0);
                return _context.abrupt("return", Promise.reject(_context.t0));

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 7]]);
      }));

      function loadLocales() {
        return _loadLocales.apply(this, arguments);
      }

      return loadLocales;
    }()
    /**
     * Load Contentful entry.
     *
     * @param {string} id
     * @return Object
     */
    ;

    _proto.loadEntry =
    /*#__PURE__*/
    function () {
      var _loadEntry = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(id) {
        var entry;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return this.client.getEntry(id);

              case 3:
                entry = _context2.sent;
                return _context2.abrupt("return", Promise.resolve(entry));

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                console.error(_context2.t0);
                return _context2.abrupt("return", Promise.reject(_context2.t0));

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 7]]);
      }));

      function loadEntry(_x) {
        return _loadEntry.apply(this, arguments);
      }

      return loadEntry;
    }()
    /**
     * Load Contentful entries to build routes out of, recursively loading entries
     * until all entries for the query are loaded.
     *
     * @param {Object} query
     * @param {Number} skip
     * @param {Array} items
     * @return Promise
     */
    ;

    _proto.loadEntries =
    /*#__PURE__*/
    function () {
      var _loadEntries = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(query, skip, items) {
        var entries;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (skip === void 0) {
                  skip = 0;
                }

                if (items === void 0) {
                  items = [];
                }

                _context3.prev = 2;
                _context3.next = 5;
                return this.client.getEntries(Object.assign({}, query, {
                  skip: skip
                }));

              case 5:
                entries = _context3.sent;

                if (!(entries.skip + entries.items.length < entries.total)) {
                  _context3.next = 8;
                  break;
                }

                return _context3.abrupt("return", this.loadEntries(query, skip + entries.limit, [].concat(items, entries.items)));

              case 8:
                return _context3.abrupt("return", Promise.resolve(Object.assign({}, entries, {
                  items: [].concat(items, entries.items)
                })));

              case 11:
                _context3.prev = 11;
                _context3.t0 = _context3["catch"](2);
                console.error(_context3.t0);
                return _context3.abrupt("return", Promise.reject(_context3.t0));

              case 15:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2, 11]]);
      }));

      function loadEntries(_x2, _x3, _x4) {
        return _loadEntries.apply(this, arguments);
      }

      return loadEntries;
    }()
    /**
     * Build an array of object for use with links entries for a route.
     *
     * @param {function} toPath
     * @param {Object} params
     * @return Array
     */
    ;

    _proto.buildLocaleLinks = function buildLocaleLinks(toPath, params) {
      if (params === void 0) {
        params = {};
      }

      return this.options.locales.map(function (locale) {
        return {
          url: decodeURIComponent(toPath(_objectSpread(_objectSpread({}, params), {}, {
            locale: locale
          }))),
          lang: locale
        };
      });
    }
    /**
     * Check entry to make sure it fulfills being able to be converted to a route.
     *
     * @param {Object} entry
     * @param {Object} route
     * @param {Object} params
     * @return boolean
     */
    ;

    _proto.filterEntry = function filterEntry(entry, route, params) {
      // Filter all non-objects or objects that are empty
      if (typeof entry !== 'object' || Object.keys(entry).length === 0) {
        return false;
      } // If the route has specified params, make sure those params are accessible on the entry


      if (route.params) {
        Object.keys(route.params).forEach(function (param) {
          var paramPath = route.params[param];

          if (!has(entry, paramPath) || !get(entry, paramPath) || get(entry, paramPath) === undefined) {
            return false;
          }
        });
      } // Confirm that all params expected by the route pattern are supplied
      // via the params pulled from the entry


      var entryParams = this.buildEntryParams(entry, route, params);
      var tokensValid = true;

      if (route.params) {
        var tokens = pathToRegexp.parse(route.pattern);
        tokens.forEach(function (token) {
          if (typeof token === 'object' && token.name) {
            var tokenInvalid = !entryParams.hasOwnProperty(token.name) || !entryParams[token.name] || entryParams[token.name] === undefined;

            if (tokenInvalid) {
              tokensValid = false;
            }
          }
        });
      }

      return tokensValid;
    }
    /**
     * Build an object that contains all the params necessary for the route
     * based on the entry and params provided.
     *
     * @param {Object} entry
     * @param {Object} route
     * @param {Object} params
     * @return Object
     */
    ;

    _proto.buildEntryParams = function buildEntryParams(entry, route, params) {
      var entryParams = Object.assign({}, params);

      if (route.params) {
        Object.keys(route.params).forEach(function (param) {
          var paramPath = route.params[param];
          entryParams[param] = get(entry, paramPath);
        });
      }

      return entryParams;
    }
    /**
     * Handle loading entries for a route and resolve with an array of Promises for each entry.
     *
     * @param {Object} route
     * @param {function} toPath
     * @param {Object} params
     * @return Array
     */
    ;

    _proto.handleQueryRoute =
    /*#__PURE__*/
    function () {
      var _handleQueryRoute = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(route, toPath, params) {
        var _this2 = this;

        var query, entries, routes, hasEntries;
        return regenerator.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (params === void 0) {
                  params = {};
                }

                query = Object.assign({}, route.query, {
                  select: "" + (route.query.select || '') + (this.options.dynamicLastmod ? "," + this.options.lastmodParam : '')
                });
                _context4.prev = 2;
                _context4.next = 5;
                return this.loadEntries(route.query);

              case 5:
                entries = _context4.sent;
                routes = [];
                hasEntries = entries && entries.items && entries.items.length && Array.isArray(entries.items);

                if (hasEntries) {
                  _context4.next = 10;
                  break;
                }

                return _context4.abrupt("return", Promise.resolve(routes));

              case 10:
                entries.items.filter(function (entry) {
                  return typeof entry === 'object' && Object.keys(entry).length > 0;
                }).filter(function (entry) {
                  return _this2.filterEntry(entry, route, params);
                }).forEach(function (entry) {
                  var entryParams = _this2.buildEntryParams(entry, route, params);

                  if (_this2.options.dynamicLastmod) {
                    route.lastmodISO = get(entry, _this2.options.lastmodParam);
                  }

                  if (_this2.options.dynamicLocales) {
                    route.links = _this2.buildLocaleLinks(toPath, entryParams);
                  }

                  routes.push(_objectSpread(_objectSpread({}, route), {}, {
                    url: decodeURIComponent(toPath(entryParams))
                  }));
                });
                return _context4.abrupt("return", Promise.resolve(routes));

              case 14:
                _context4.prev = 14;
                _context4.t0 = _context4["catch"](2);
                console.error(_context4.t0);
                return _context4.abrupt("return", Promise.reject(_context4.t0));

              case 18:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 14]]);
      }));

      function handleQueryRoute(_x5, _x6, _x7) {
        return _handleQueryRoute.apply(this, arguments);
      }

      return handleQueryRoute;
    }()
    /**
     * Loop through routes, parsing them based on their properties.
     *
     * @return Array
     */
    ;

    _proto.parseRoutes =
    /*#__PURE__*/
    function () {
      var _parseRoutes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6() {
        var _this3 = this;

        var routes;
        return regenerator.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                routes = this.routes.map( /*#__PURE__*/function () {
                  var _ref = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(route) {
                    var entry, toPath, params, _Object$assign, queryRoutes;

                    return regenerator.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            if (!(route.id && _this3.options.dynamicLastmod)) {
                              _context5.next = 5;
                              break;
                            }

                            _context5.next = 3;
                            return _this3.loadEntry(route.id);

                          case 3:
                            entry = _context5.sent;
                            route.lastmodISO = get(entry, _this3.options.lastmodParam);

                          case 5:
                            if (!route.pattern) {
                              _context5.next = 22;
                              break;
                            }

                            toPath = pathToRegexp.compile(route.pattern);
                            params = {};

                            if (_this3.options.defaultLocale) {
                              Object.assign(params, (_Object$assign = {}, _Object$assign[_this3.options.localeParam] = _this3.options.defaultLocale, _Object$assign));
                            }

                            if (!route.query) {
                              _context5.next = 14;
                              break;
                            }

                            _context5.next = 12;
                            return _this3.handleQueryRoute(route, toPath, params);

                          case 12:
                            queryRoutes = _context5.sent;
                            return _context5.abrupt("return", queryRoutes);

                          case 14:
                            _context5.prev = 14;

                            if (_this3.options.dynamicLocales) {
                              route.links = _this3.buildLocaleLinks(toPath, params);
                            }

                            return _context5.abrupt("return", [_objectSpread(_objectSpread({}, route), {}, {
                              url: decodeURIComponent(toPath(params))
                            })]);

                          case 19:
                            _context5.prev = 19;
                            _context5.t0 = _context5["catch"](14);
                            return _context5.abrupt("return", null);

                          case 22:
                            return _context5.abrupt("return", Promise.resolve([route]));

                          case 23:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5, null, [[14, 19]]);
                  }));

                  return function (_x8) {
                    return _ref.apply(this, arguments);
                  };
                }()).filter(function (route) {
                  return route !== null;
                }).reduce(function (acc, cur) {
                  return acc.concat(cur);
                }, []);
                return _context6.abrupt("return", Promise.resolve(routes));

              case 5:
                _context6.prev = 5;
                _context6.t0 = _context6["catch"](0);
                console.error(_context6.t0);
                return _context6.abrupt("return", Promise.reject(_context6.t0));

              case 9:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[0, 5]]);
      }));

      function parseRoutes() {
        return _parseRoutes.apply(this, arguments);
      }

      return parseRoutes;
    }()
    /**
     * Parse routes to an XML file.
     *
     * @return Promise
     */
    ;

    _proto.buildRoutes =
    /*#__PURE__*/
    function () {
      var _buildRoutes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7() {
        var _this4 = this;

        var locales, routes;
        return regenerator.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                if (!this.options.dynamicLocales) {
                  _context7.next = 5;
                  break;
                }

                _context7.next = 3;
                return this.loadLocales();

              case 3:
                locales = _context7.sent;
                this.options.locales = locales.items.map(function (item) {
                  if (!_this4.options.defaultLocale && item["default"]) {
                    _this4.options.defaultLocale = item.code;
                  }

                  return item.code;
                });

              case 5:
                _context7.next = 7;
                return this.parseRoutes();

              case 7:
                routes = _context7.sent;
                return _context7.abrupt("return", Promise.all(routes).then(function (routes) {
                  return routes.reduce(function (acc, cur) {
                    return acc.concat(cur);
                  }, []);
                }));

              case 9:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function buildRoutes() {
        return _buildRoutes.apply(this, arguments);
      }

      return buildRoutes;
    }()
    /**
     * !!!DEPRECATED!!! - Do not use.
     *
     * Calls callback with generated sitemap.xml file or error.
     *
     * @param {function} callback
     * @return void
     */
    ;

    _proto.toXML = function toXML(callback) {
      var _this5 = this;

      this.buildRoutes().then(function (routes) {
        var smStream = new SitemapStream({
          hostname: _this5.options.origin
        });
        routes.forEach(function (route) {
          return smStream.write(route);
        });
        smStream.end();
        streamToPromise(smStream).then(function (data) {
          return callback(data.toString(), null);
        });
      })["catch"](function (err) {
        return callback(null, err);
      });
    };

    return ContentfulSitemap;
  }();
  ContentfulSitemap.prototype.routes = [];
  ContentfulSitemap.prototype.route = {
    url: null,
    changefreq: null,
    lastmod: null,
    priority: 1,
    id: null,
    pattern: null,
    params: null,
    query: null
  };
  ContentfulSitemap.prototype.options = {
    locales: [],
    dynamicLocales: false,
    dynamicLastmod: false,
    origin: '',
    lastmodParam: 'sys.updatedAt',
    localeParam: 'locale',
    defaultLocale: null
  };

  exports.ContentfulSitemap = ContentfulSitemap;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
/* follow me on Twitter! @ryanhefner */
