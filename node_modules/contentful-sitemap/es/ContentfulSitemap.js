import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var pathToRegexp = require('path-to-regexp');

var invariant = require('invariant');

var has = require('lodash.has');

var get = require('lodash.get');

var _require = require('sitemap'),
    SitemapStream = _require.SitemapStream,
    streamToPromise = _require.streamToPromise;
/**
 * Validate client object matches expected shape of Contentful client.
 *
 * @param {Object} client
 * @return boolean
 */


var validClient = function validClient(client) {
  if (!client.getEntries || typeof client.getEntries !== 'function') {
    return false;
  }

  if (!client.getEntry || typeof client.getEntry !== 'function') {
    return false;
  }

  if (!client.getLocales || typeof client.getLocales !== 'function') {
    return false;
  }

  return true;
};
/**
 * ContentfulSitemap Class
 * Accepts an array of routes, a Contentful client and a few options and can
 * spit out a beautiful sitemap that includes locale support.
 *
 * @param {ContentfulClient} client
 * @param {Array} routes
 * @param {Object} options
 * @return ContentfulSitemap
 */


export var ContentfulSitemap = /*#__PURE__*/function () {
  function ContentfulSitemap(client, routes, options) {
    var _this = this;

    if (routes === void 0) {
      routes = [];
    }

    if (options === void 0) {
      options = {};
    }

    invariant(client, 'Contentful client not provided to ContentfulSitemap');
    invariant(validClient(client), '`client` is not a valid instance of `ContentfulClientApi`');
    this.client = client;
    this.routes = routes.map(function (route) {
      return Object.assign({}, _this.route, route);
    });
    this.options = Object.assign({}, this.options, options);
  }
  /**
   * Add a route
   *
   * @pararm {Object} route
   * @return ContentfulSitemap
   */


  var _proto = ContentfulSitemap.prototype;

  _proto.addRoute = function addRoute(route) {
    this.routes = [].concat(this.routes, [Object.assign({}, this.route, route)]);
    return this;
  }
  /**
   * Load locales from Contentful
   *
   * @return Promise
   */
  ;

  _proto.loadLocales =
  /*#__PURE__*/
  function () {
    var _loadLocales = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var locales;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return this.client.getLocales();

            case 3:
              locales = _context.sent;
              return _context.abrupt("return", Promise.resolve(locales));

            case 7:
              _context.prev = 7;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);
              return _context.abrupt("return", Promise.reject(_context.t0));

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 7]]);
    }));

    function loadLocales() {
      return _loadLocales.apply(this, arguments);
    }

    return loadLocales;
  }()
  /**
   * Load Contentful entry.
   *
   * @param {string} id
   * @return Object
   */
  ;

  _proto.loadEntry =
  /*#__PURE__*/
  function () {
    var _loadEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {
      var entry;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.prev = 0;
              _context2.next = 3;
              return this.client.getEntry(id);

            case 3:
              entry = _context2.sent;
              return _context2.abrupt("return", Promise.resolve(entry));

            case 7:
              _context2.prev = 7;
              _context2.t0 = _context2["catch"](0);
              console.error(_context2.t0);
              return _context2.abrupt("return", Promise.reject(_context2.t0));

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[0, 7]]);
    }));

    function loadEntry(_x) {
      return _loadEntry.apply(this, arguments);
    }

    return loadEntry;
  }()
  /**
   * Load Contentful entries to build routes out of, recursively loading entries
   * until all entries for the query are loaded.
   *
   * @param {Object} query
   * @param {Number} skip
   * @param {Array} items
   * @return Promise
   */
  ;

  _proto.loadEntries =
  /*#__PURE__*/
  function () {
    var _loadEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(query, skip, items) {
      var entries;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (skip === void 0) {
                skip = 0;
              }

              if (items === void 0) {
                items = [];
              }

              _context3.prev = 2;
              _context3.next = 5;
              return this.client.getEntries(Object.assign({}, query, {
                skip: skip
              }));

            case 5:
              entries = _context3.sent;

              if (!(entries.skip + entries.items.length < entries.total)) {
                _context3.next = 8;
                break;
              }

              return _context3.abrupt("return", this.loadEntries(query, skip + entries.limit, [].concat(items, entries.items)));

            case 8:
              return _context3.abrupt("return", Promise.resolve(Object.assign({}, entries, {
                items: [].concat(items, entries.items)
              })));

            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](2);
              console.error(_context3.t0);
              return _context3.abrupt("return", Promise.reject(_context3.t0));

            case 15:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[2, 11]]);
    }));

    function loadEntries(_x2, _x3, _x4) {
      return _loadEntries.apply(this, arguments);
    }

    return loadEntries;
  }()
  /**
   * Build an array of object for use with links entries for a route.
   *
   * @param {function} toPath
   * @param {Object} params
   * @return Array
   */
  ;

  _proto.buildLocaleLinks = function buildLocaleLinks(toPath, params) {
    if (params === void 0) {
      params = {};
    }

    return this.options.locales.map(function (locale) {
      return {
        url: decodeURIComponent(toPath(_objectSpread(_objectSpread({}, params), {}, {
          locale: locale
        }))),
        lang: locale
      };
    });
  }
  /**
   * Check entry to make sure it fulfills being able to be converted to a route.
   *
   * @param {Object} entry
   * @param {Object} route
   * @param {Object} params
   * @return boolean
   */
  ;

  _proto.filterEntry = function filterEntry(entry, route, params) {
    // Filter all non-objects or objects that are empty
    if (typeof entry !== 'object' || Object.keys(entry).length === 0) {
      return false;
    } // If the route has specified params, make sure those params are accessible on the entry


    if (route.params) {
      Object.keys(route.params).forEach(function (param) {
        var paramPath = route.params[param];

        if (!has(entry, paramPath) || !get(entry, paramPath) || get(entry, paramPath) === undefined) {
          return false;
        }
      });
    } // Confirm that all params expected by the route pattern are supplied
    // via the params pulled from the entry


    var entryParams = this.buildEntryParams(entry, route, params);
    var tokensValid = true;

    if (route.params) {
      var tokens = pathToRegexp.parse(route.pattern);
      tokens.forEach(function (token) {
        if (typeof token === 'object' && token.name) {
          var tokenInvalid = !entryParams.hasOwnProperty(token.name) || !entryParams[token.name] || entryParams[token.name] === undefined;

          if (tokenInvalid) {
            tokensValid = false;
          }
        }
      });
    }

    return tokensValid;
  }
  /**
   * Build an object that contains all the params necessary for the route
   * based on the entry and params provided.
   *
   * @param {Object} entry
   * @param {Object} route
   * @param {Object} params
   * @return Object
   */
  ;

  _proto.buildEntryParams = function buildEntryParams(entry, route, params) {
    var entryParams = Object.assign({}, params);

    if (route.params) {
      Object.keys(route.params).forEach(function (param) {
        var paramPath = route.params[param];
        entryParams[param] = get(entry, paramPath);
      });
    }

    return entryParams;
  }
  /**
   * Handle loading entries for a route and resolve with an array of Promises for each entry.
   *
   * @param {Object} route
   * @param {function} toPath
   * @param {Object} params
   * @return Array
   */
  ;

  _proto.handleQueryRoute =
  /*#__PURE__*/
  function () {
    var _handleQueryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(route, toPath, params) {
      var _this2 = this;

      var query, entries, routes, hasEntries;
      return _regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (params === void 0) {
                params = {};
              }

              query = Object.assign({}, route.query, {
                select: "" + (route.query.select || '') + (this.options.dynamicLastmod ? "," + this.options.lastmodParam : '')
              });
              _context4.prev = 2;
              _context4.next = 5;
              return this.loadEntries(route.query);

            case 5:
              entries = _context4.sent;
              routes = [];
              hasEntries = entries && entries.items && entries.items.length && Array.isArray(entries.items);

              if (hasEntries) {
                _context4.next = 10;
                break;
              }

              return _context4.abrupt("return", Promise.resolve(routes));

            case 10:
              entries.items.filter(function (entry) {
                return typeof entry === 'object' && Object.keys(entry).length > 0;
              }).filter(function (entry) {
                return _this2.filterEntry(entry, route, params);
              }).forEach(function (entry) {
                var entryParams = _this2.buildEntryParams(entry, route, params);

                if (_this2.options.dynamicLastmod) {
                  route.lastmodISO = get(entry, _this2.options.lastmodParam);
                }

                if (_this2.options.dynamicLocales) {
                  route.links = _this2.buildLocaleLinks(toPath, entryParams);
                }

                routes.push(_objectSpread(_objectSpread({}, route), {}, {
                  url: decodeURIComponent(toPath(entryParams))
                }));
              });
              return _context4.abrupt("return", Promise.resolve(routes));

            case 14:
              _context4.prev = 14;
              _context4.t0 = _context4["catch"](2);
              console.error(_context4.t0);
              return _context4.abrupt("return", Promise.reject(_context4.t0));

            case 18:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[2, 14]]);
    }));

    function handleQueryRoute(_x5, _x6, _x7) {
      return _handleQueryRoute.apply(this, arguments);
    }

    return handleQueryRoute;
  }()
  /**
   * Loop through routes, parsing them based on their properties.
   *
   * @return Array
   */
  ;

  _proto.parseRoutes =
  /*#__PURE__*/
  function () {
    var _parseRoutes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
      var _this3 = this;

      var routes;
      return _regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              routes = this.routes.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(route) {
                  var entry, toPath, params, _Object$assign, queryRoutes;

                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                      switch (_context5.prev = _context5.next) {
                        case 0:
                          if (!(route.id && _this3.options.dynamicLastmod)) {
                            _context5.next = 5;
                            break;
                          }

                          _context5.next = 3;
                          return _this3.loadEntry(route.id);

                        case 3:
                          entry = _context5.sent;
                          route.lastmodISO = get(entry, _this3.options.lastmodParam);

                        case 5:
                          if (!route.pattern) {
                            _context5.next = 22;
                            break;
                          }

                          toPath = pathToRegexp.compile(route.pattern);
                          params = {};

                          if (_this3.options.defaultLocale) {
                            Object.assign(params, (_Object$assign = {}, _Object$assign[_this3.options.localeParam] = _this3.options.defaultLocale, _Object$assign));
                          }

                          if (!route.query) {
                            _context5.next = 14;
                            break;
                          }

                          _context5.next = 12;
                          return _this3.handleQueryRoute(route, toPath, params);

                        case 12:
                          queryRoutes = _context5.sent;
                          return _context5.abrupt("return", queryRoutes);

                        case 14:
                          _context5.prev = 14;

                          if (_this3.options.dynamicLocales) {
                            route.links = _this3.buildLocaleLinks(toPath, params);
                          }

                          return _context5.abrupt("return", [_objectSpread(_objectSpread({}, route), {}, {
                            url: decodeURIComponent(toPath(params))
                          })]);

                        case 19:
                          _context5.prev = 19;
                          _context5.t0 = _context5["catch"](14);
                          return _context5.abrupt("return", null);

                        case 22:
                          return _context5.abrupt("return", Promise.resolve([route]));

                        case 23:
                        case "end":
                          return _context5.stop();
                      }
                    }
                  }, _callee5, null, [[14, 19]]);
                }));

                return function (_x8) {
                  return _ref.apply(this, arguments);
                };
              }()).filter(function (route) {
                return route !== null;
              }).reduce(function (acc, cur) {
                return acc.concat(cur);
              }, []);
              return _context6.abrupt("return", Promise.resolve(routes));

            case 5:
              _context6.prev = 5;
              _context6.t0 = _context6["catch"](0);
              console.error(_context6.t0);
              return _context6.abrupt("return", Promise.reject(_context6.t0));

            case 9:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[0, 5]]);
    }));

    function parseRoutes() {
      return _parseRoutes.apply(this, arguments);
    }

    return parseRoutes;
  }()
  /**
   * Parse routes to an XML file.
   *
   * @return Promise
   */
  ;

  _proto.buildRoutes =
  /*#__PURE__*/
  function () {
    var _buildRoutes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
      var _this4 = this;

      var locales, routes;
      return _regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!this.options.dynamicLocales) {
                _context7.next = 5;
                break;
              }

              _context7.next = 3;
              return this.loadLocales();

            case 3:
              locales = _context7.sent;
              this.options.locales = locales.items.map(function (item) {
                if (!_this4.options.defaultLocale && item["default"]) {
                  _this4.options.defaultLocale = item.code;
                }

                return item.code;
              });

            case 5:
              _context7.next = 7;
              return this.parseRoutes();

            case 7:
              routes = _context7.sent;
              return _context7.abrupt("return", Promise.all(routes).then(function (routes) {
                return routes.reduce(function (acc, cur) {
                  return acc.concat(cur);
                }, []);
              }));

            case 9:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function buildRoutes() {
      return _buildRoutes.apply(this, arguments);
    }

    return buildRoutes;
  }()
  /**
   * !!!DEPRECATED!!! - Do not use.
   *
   * Calls callback with generated sitemap.xml file or error.
   *
   * @param {function} callback
   * @return void
   */
  ;

  _proto.toXML = function toXML(callback) {
    var _this5 = this;

    this.buildRoutes().then(function (routes) {
      var smStream = new SitemapStream({
        hostname: _this5.options.origin
      });
      routes.forEach(function (route) {
        return smStream.write(route);
      });
      smStream.end();
      streamToPromise(smStream).then(function (data) {
        return callback(data.toString(), null);
      });
    })["catch"](function (err) {
      return callback(null, err);
    });
  };

  return ContentfulSitemap;
}();
ContentfulSitemap.prototype.routes = [];
ContentfulSitemap.prototype.route = {
  url: null,
  changefreq: null,
  lastmod: null,
  priority: 1,
  id: null,
  pattern: null,
  params: null,
  query: null
};
ContentfulSitemap.prototype.options = {
  locales: [],
  dynamicLocales: false,
  dynamicLastmod: false,
  origin: '',
  lastmodParam: 'sys.updatedAt',
  localeParam: 'locale',
  defaultLocale: null
};